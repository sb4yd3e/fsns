<?php
/* 
 * Generated by CRUDigniter v3.0 Beta 
 * www.crudigniter.com
 */

class Products extends CI_Controller{
 public $render_data = array();

 public function __construct() {
    parent::__construct();

    $this->template->set_template('admin');
    $this->load->model('Products_model','products');
}

    /*
     * Listing of products
     */
    function index()
    {
        if(!is_group('admin')){
            redirect('admin');
            exit();
        } 
        //******* Defalut ********//
        $render_data['user'] = $this->session->userdata('fnsn');
        $this->template->write('title', 'Products ');
        $this->template->write('user_id', $render_data['user']['aid']);
        $this->template->write('user_name', $render_data['user']['name']);
        $this->template->write('user_group', $render_data['user']['group']);
        //******* Defalut ********//

        // ====== Java script Data tabale ======= //
        $js = 'var table;
        $(document).ready(function() {
            table = $("#table").DataTable({ 
                "processing": true,
                "serverSide": true,
                "order": [],
                "ajax": {
                    "url": "'.base_url('admin/products/ajax').'",
                    "type": "POST",
                    data:function(data){
                        data.group = $("#group").val();
                        data.online = $("#online").val();
                        data.in_stock = $("#in_stock").val();
                    }
                },
                "columnDefs": [
                { 
                    "targets": [5], 
                    "orderable": false,
                },
                ],
            });
            $("#show").change(function () {
                $("#table_length select").val($(this).val());
                $("#table_length select").trigger("change");
            });
            $("#search").on("keyup", function () {
                $("#table_filter input[type=\"search\"]").val($(this).val());
                $("#table_filter input[type=\"search\"]").trigger("keyup");
            });
            $("#group").change(function(){
                var table = $("#table").DataTable();
                table.ajax.reload();
            });$("#online").change(function(){
                var table = $("#table").DataTable();
                table.ajax.reload();
            });$("#in_stock").change(function(){
                var table = $("#table").DataTable();
                table.ajax.reload();
            });
        });

        ';
        if($this->input->get('add')=="true"){
            $js .= '$.notify("Add new product success.", "success");';
        }
        if($this->input->get('delete')=="true"){
            $js .= '$.notify("Delete product success", "success");';
        }
        if($this->input->get('save')=="true"){
            $js .= '$.notify("Save product success.", "success");';
        }
        $render_data["groups"] = $this->products->group_all();
        $this->template->write('js', $js);
        $this->template->write_view('content', 'admin/products/index', $render_data);
        $this->template->render();
    }


    public function ajax(){
        if (!$this->input->is_ajax_request() || !is_group('admin')) {
            exit('No direct script access allowed');
        }

        $list = $this->products->get_all();
        $data = array();
        $no = $this->input->post('start');
        foreach ($list as $products) {
            $no++;
            $row = array();
            $row[] = '<img src="'.base_url('timthumb.php?src=').base_url('uploads/products/'.$products->cover).'&w=150&h=150&z=c" style="width:150px; height:auto;">';
            $row[] = '<a href="'.base_url('products/'.$products->id.'/'.url_title($products->title)).'" target="_blank">'.$products->title.'</a>';
            $row[] = $products->model_code;
            $row[] = $products->group;
            $row[] = is_online($products->online);
            $row[] = $products->normal_price;
            $row[] = $products->special_price;
            $row[] = in_stock($products->in_stock);
            $row[] = '<a href="'.base_url('frontend/product_pdf_download/'.$products->id.'/'.md5($products->id.'suwichalala').'/'.url_title($products->title)).'_Specification.pdf'.'" class="label label-info"><i class="fa fa-download"></i> PDF</a> <a href="'.base_url('admin/products/edit/'.$products->id).'" class="label label-warning"><i class="fa fa-pencil"></i> Edit</a> 
            <a href="'.base_url('admin/products/delete/'.$products->id).'" class="label label-danger"  onclick="return confirm(\'Are you sure?\')"><i class="fa fa-times-circle"></i> Delete</a>';
            $data[] = $row;
        }

        $output = array(
            "draw" => $this->input->post('draw'),
            "recordsTotal" => $this->products->count_all(),
            "recordsFiltered" => $this->products->count_filtered(),
            "data" => $data,
            );
        echo json_encode($output);
    }


    /*
     * Adding a new product
     */
    function add()
    {   
        $this->load->library('form_validation');

        $this->form_validation->set_rules('product_title','Product Title','required|is_unique[product_title]');
        $this->form_validation->set_rules('product_photo','Product Photo','required');

        if($this->form_validation->run())     
        {   
            $params = array(
                'product_category' => $this->input->post('product_category'),
                'product_online' => $this->input->post('product_online'),
                'product_title' => $this->input->post('product_title'),
                'product_photo' => $this->input->post('product_photo'),
                'product_group' => $this->input->post('product_group'),
                'product_pdf' => $this->input->post('product_pdf'),
                'product_price' => $this->input->post('product_price'),
                'product_spacial_price' => $this->input->post('product_spacial_price'),
                'product_description' => $this->input->post('product_description'),
                );
            
            $product_id = $this->Product_model->add_product($params);
            redirect('product/index');
        }
        else
        {
         $this->load->model('Product_sub_category_model');
         $data['all_product_sub_categories'] = $this->Product_sub_category_model->get_all_product_sub_categories();

         $data['_view'] = 'product/add';
         $this->load->view('layouts/main',$data);
     }
 }  

    /*
     * Editing a product
     */
    function edit($pid)
    {   
        // check if the product exists before trying to edit it
        $data['product'] = $this->Product_model->get_product($pid);
        
        if(isset($data['product']['pid']))
        {
            $this->load->library('form_validation');

            $this->form_validation->set_rules('product_title','Product Title','required|is_unique[product_title]');
            $this->form_validation->set_rules('product_photo','Product Photo','required');

            if($this->form_validation->run())     
            {   
                $params = array(
                   'product_category' => $this->input->post('product_category'),
                   'product_online' => $this->input->post('product_online'),
                   'product_title' => $this->input->post('product_title'),
                   'product_photo' => $this->input->post('product_photo'),
                   'product_group' => $this->input->post('product_group'),
                   'product_pdf' => $this->input->post('product_pdf'),
                   'product_price' => $this->input->post('product_price'),
                   'product_spacial_price' => $this->input->post('product_spacial_price'),
                   'product_description' => $this->input->post('product_description'),
                   );

                $this->Product_model->update_product($pid,$params);            
                redirect('product/index');
            }
            else
            {
                $this->load->model('Product_sub_category_model');
                $data['all_product_sub_categories'] = $this->Product_sub_category_model->get_all_product_sub_categories();

                $data['_view'] = 'product/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The product you are trying to edit does not exist.');
    } 

    /*
     * Deleting product
     */
    function remove($pid)
    {
        $product = $this->Product_model->get_product($pid);

        // check if the product exists before trying to delete it
        if(isset($product['pid']))
        {
            $this->Product_model->delete_product($pid);
            redirect('product/index');
        }
        else
            show_error('The product you are trying to delete does not exist.');
    }
    
}
